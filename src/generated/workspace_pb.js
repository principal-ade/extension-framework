// source: workspace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.host.Diagnostic', null, global);
goog.exportSymbol('proto.host.Diagnostic.Severity', null, global);
goog.exportSymbol('proto.host.Empty', null, global);
goog.exportSymbol('proto.host.GetDiagnosticsResponse', null, global);
goog.exportSymbol('proto.host.GetWorkspacePathsResponse', null, global);
goog.exportSymbol('proto.host.SaveOpenDocumentIfDirtyRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.host.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.host.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.host.Empty.displayName = 'proto.host.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.host.GetWorkspacePathsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.host.GetWorkspacePathsResponse.repeatedFields_, null);
};
goog.inherits(proto.host.GetWorkspacePathsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.host.GetWorkspacePathsResponse.displayName = 'proto.host.GetWorkspacePathsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.host.SaveOpenDocumentIfDirtyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.host.SaveOpenDocumentIfDirtyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.host.SaveOpenDocumentIfDirtyRequest.displayName = 'proto.host.SaveOpenDocumentIfDirtyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.host.Diagnostic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.host.Diagnostic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.host.Diagnostic.displayName = 'proto.host.Diagnostic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.host.GetDiagnosticsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.host.GetDiagnosticsResponse.repeatedFields_, null);
};
goog.inherits(proto.host.GetDiagnosticsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.host.GetDiagnosticsResponse.displayName = 'proto.host.GetDiagnosticsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.host.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.host.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.host.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.host.Empty}
 */
proto.host.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.host.Empty;
  return proto.host.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.host.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.host.Empty}
 */
proto.host.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.host.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.host.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.host.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.host.GetWorkspacePathsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.host.GetWorkspacePathsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.host.GetWorkspacePathsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.host.GetWorkspacePathsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.GetWorkspacePathsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.host.GetWorkspacePathsResponse}
 */
proto.host.GetWorkspacePathsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.host.GetWorkspacePathsResponse;
  return proto.host.GetWorkspacePathsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.host.GetWorkspacePathsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.host.GetWorkspacePathsResponse}
 */
proto.host.GetWorkspacePathsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.host.GetWorkspacePathsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.host.GetWorkspacePathsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.host.GetWorkspacePathsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.GetWorkspacePathsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.host.GetWorkspacePathsResponse.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.host.GetWorkspacePathsResponse} returns this
 */
proto.host.GetWorkspacePathsResponse.prototype.setPathsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.host.GetWorkspacePathsResponse} returns this
 */
proto.host.GetWorkspacePathsResponse.prototype.addPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.host.GetWorkspacePathsResponse} returns this
 */
proto.host.GetWorkspacePathsResponse.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.host.SaveOpenDocumentIfDirtyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.host.SaveOpenDocumentIfDirtyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.host.SaveOpenDocumentIfDirtyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.SaveOpenDocumentIfDirtyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentUri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.host.SaveOpenDocumentIfDirtyRequest}
 */
proto.host.SaveOpenDocumentIfDirtyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.host.SaveOpenDocumentIfDirtyRequest;
  return proto.host.SaveOpenDocumentIfDirtyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.host.SaveOpenDocumentIfDirtyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.host.SaveOpenDocumentIfDirtyRequest}
 */
proto.host.SaveOpenDocumentIfDirtyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.host.SaveOpenDocumentIfDirtyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.host.SaveOpenDocumentIfDirtyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.host.SaveOpenDocumentIfDirtyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.SaveOpenDocumentIfDirtyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string document_uri = 1;
 * @return {string}
 */
proto.host.SaveOpenDocumentIfDirtyRequest.prototype.getDocumentUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.host.SaveOpenDocumentIfDirtyRequest} returns this
 */
proto.host.SaveOpenDocumentIfDirtyRequest.prototype.setDocumentUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.host.Diagnostic.prototype.toObject = function(opt_includeInstance) {
  return proto.host.Diagnostic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.host.Diagnostic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.Diagnostic.toObject = function(includeInstance, msg) {
  var f, obj = {
    severity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lineStart: jspb.Message.getFieldWithDefault(msg, 4, 0),
    charStart: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lineEnd: jspb.Message.getFieldWithDefault(msg, 6, 0),
    charEnd: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.host.Diagnostic}
 */
proto.host.Diagnostic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.host.Diagnostic;
  return proto.host.Diagnostic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.host.Diagnostic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.host.Diagnostic}
 */
proto.host.Diagnostic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.host.Diagnostic.Severity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineStart(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharStart(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLineEnd(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.host.Diagnostic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.host.Diagnostic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.host.Diagnostic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.Diagnostic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLineStart();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCharStart();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLineEnd();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCharEnd();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.host.Diagnostic.Severity = {
  UNKNOWN: 0,
  HINT: 1,
  INFORMATION: 2,
  WARNING: 3,
  ERROR: 4
};

/**
 * optional Severity severity = 1;
 * @return {!proto.host.Diagnostic.Severity}
 */
proto.host.Diagnostic.prototype.getSeverity = function() {
  return /** @type {!proto.host.Diagnostic.Severity} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.host.Diagnostic.Severity} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.host.Diagnostic.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.host.Diagnostic.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 line_start = 4;
 * @return {number}
 */
proto.host.Diagnostic.prototype.getLineStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setLineStart = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 char_start = 5;
 * @return {number}
 */
proto.host.Diagnostic.prototype.getCharStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setCharStart = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 line_end = 6;
 * @return {number}
 */
proto.host.Diagnostic.prototype.getLineEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setLineEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 char_end = 7;
 * @return {number}
 */
proto.host.Diagnostic.prototype.getCharEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.host.Diagnostic} returns this
 */
proto.host.Diagnostic.prototype.setCharEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.host.GetDiagnosticsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.host.GetDiagnosticsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.host.GetDiagnosticsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.host.GetDiagnosticsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.GetDiagnosticsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagnosticsList: jspb.Message.toObjectList(msg.getDiagnosticsList(),
    proto.host.Diagnostic.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.host.GetDiagnosticsResponse}
 */
proto.host.GetDiagnosticsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.host.GetDiagnosticsResponse;
  return proto.host.GetDiagnosticsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.host.GetDiagnosticsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.host.GetDiagnosticsResponse}
 */
proto.host.GetDiagnosticsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.host.Diagnostic;
      reader.readMessage(value,proto.host.Diagnostic.deserializeBinaryFromReader);
      msg.addDiagnostics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.host.GetDiagnosticsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.host.GetDiagnosticsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.host.GetDiagnosticsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.host.GetDiagnosticsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagnosticsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.host.Diagnostic.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Diagnostic diagnostics = 1;
 * @return {!Array<!proto.host.Diagnostic>}
 */
proto.host.GetDiagnosticsResponse.prototype.getDiagnosticsList = function() {
  return /** @type{!Array<!proto.host.Diagnostic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.host.Diagnostic, 1));
};


/**
 * @param {!Array<!proto.host.Diagnostic>} value
 * @return {!proto.host.GetDiagnosticsResponse} returns this
*/
proto.host.GetDiagnosticsResponse.prototype.setDiagnosticsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.host.Diagnostic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.host.Diagnostic}
 */
proto.host.GetDiagnosticsResponse.prototype.addDiagnostics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.host.Diagnostic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.host.GetDiagnosticsResponse} returns this
 */
proto.host.GetDiagnosticsResponse.prototype.clearDiagnosticsList = function() {
  return this.setDiagnosticsList([]);
};


goog.object.extend(exports, proto.host);
